mkdir chess-review-app
cd chess-review-app
mkdir backend frontend
cd backend
npm init -y
npm install express mongoose dotenv cors bcryptjs jsonwebtoken
npm install --save-dev nodemon jest supertest @babel/core @babel/preset-env mongodb-memory-server concurrently
npm install glicko2
mongod
npm run dev:backend

# Test the base endpoint
curl http://localhost:5000

# Expected output should be:
# {"message":"Welcome to Chess Review App API"} 

curl -X POST http://localhost:5000/api/test/user \
  -H "Content-Type: application/json" 

# Run all tests
npm test

# Run only backend tests
npm run test:backend

# Run only frontend tests (when we add them)
npm run test:frontend

# Run both frontend and backend in development
npm run dev

mkdir -p backend/tests/unit backend/tests/integration backend/tests/models

# Option 1: Run from root directory
npm test

# Option 2: Run from backend directory
cd backend
npm test 

# From the root directory
npm install

# Then cd into backend and install its dependencies
cd backend
npm install

# Now you can run tests from the root
cd ..
npm test 

# From the backend directory
mkdir -p tests/models tests/integration tests/unit 

# Make the script executable (only need to do this once)
chmod +x start.sh

# Start everything with one command
npm start 

# Initialize git repo from root directory
cd ..  # if you're in backend/
git init

# Create .gitignore
cat > .gitignore << EOL
# Dependencies
node_modules/
.pnp
.pnp.js

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Testing
coverage/

# Production build
build/
dist/

# IDE
.idea/
.vscode/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
EOL

# Create a .gitkeep file to track the empty directory
touch frontend/.gitkeep

# Try the git commands again
git add .
git commit -m "Initial commit: Backend implementation with auth, puzzles, and Glicko-2 rating system" 

# Remove any existing git repository in frontend
rm -rf frontend/.git

# Remove the frontend directory completely
rm -rf frontend

# Create a fresh frontend directory
mkdir frontend

# Add the .gitkeep file
touch frontend/.gitkeep

# Now try the git commands again
git add .
git commit -m "Initial commit: Backend implementation with auth, puzzles, and Glicko-2 rating system" 

# Build and start the containers
docker-compose up --build

# In another terminal, test the API
curl http://localhost:5000
# Should return: {"message":"Welcome to Chess Review App API"}

# Test user registration
curl -X POST http://localhost:5000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{"username": "testuser", "email": "test@example.com", "password": "password123"}' 

# Clean start (remove node_modules if they exist)
rm -rf node_modules backend/node_modules
rm backend/.env

# Run our setup scripts
npm run setup
npm run init

# In another terminal, test the API
curl http://localhost:5000 

# Register a user
curl -X POST http://localhost:5000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{"username": "testuser", "email": "test@example.com", "password": "password123"}'

# Login and save the token
TOKEN=$(curl -X POST http://localhost:5000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email": "test@example.com", "password": "password123"}' \
  | jq -r '.token')

# Test protected endpoint with the token
curl http://localhost:5000/api/puzzles \
  -H "Authorization: Bearer $TOKEN" 

# Install Docker
sudo apt-get update
sudo apt-get install docker.io

# Install Docker Compose
sudo apt-get install docker-compose

# Add your user to docker group to run without sudo
sudo usermod -aG docker $USER 

# On Linux
sudo systemctl start docker

# On Mac/Windows, just open Docker Desktop 

# Check Docker
docker --version

# Check Docker Compose
docker-compose --version 

# First, make sure Docker Desktop is running
# Then open a new terminal and check if docker is working
docker --version

# If that works, try docker compose (note: newer versions use "docker compose" not "docker-compose")
docker compose version

# If the above works, try running our app
docker compose up --build 

# Check if containers are running
docker ps
# Should show our app and mongodb containers

# Check the logs
docker compose logs app
# Should show the Express server starting and MongoDB connecting 

# Test the base endpoint
curl http://localhost:5000
# Should return: {"message":"Welcome to Chess Review App API"}

# Create a test user
curl -X POST http://localhost:5000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{"username": "testuser", "email": "test@example.com", "password": "password123"}'

# Login and get a token
curl -X POST http://localhost:5000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email": "test@example.com", "password": "password123"}' 